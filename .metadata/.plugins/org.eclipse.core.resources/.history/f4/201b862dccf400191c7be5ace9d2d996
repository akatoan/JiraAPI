package com.example.repository;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Base64;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.example.domain.IssueInfo;

import okhttp3.Headers;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

@Repository
public class JiraOperationRepository {

    public String createIssueAPI(IssueInfo issueInfo) throws IOException {
    	
    	String baseUri = issueInfo.getBaseUri();
    	String endPoint = baseUri + "/rest/api/2/issue";  
        
        final Map<String, String> httpHeaders = new LinkedHashMap<String, String>();
                
        String auth = issueInfo.getUserId().toString() + ":" + issueInfo.getPassword().toString();
        
        Charset charset = StandardCharsets.UTF_8;
        byte[]enc = Base64.getEncoder().encode(auth.getBytes(charset));
        String encAuth = "Basic " + new String(enc, charset);
        
        httpHeaders.put("Authorization", encAuth);

        // Create Json
        Map<String, Object> jsonMap = new LinkedHashMap<>();
        
        	Map<String, Object> fields = new LinkedHashMap<>();
        
	        	Map<String, Object> project = new LinkedHashMap<>();
	        		project.put("key", issueInfo.getProjectKey());
	        	fields.put("project", project);
	        
	        	fields.put("summary", issueInfo.getSummary());
	        
	        	Map<String, Object> issuetype = new LinkedHashMap<>();
	        		issuetype.put("id", issueInfo.getIssueTypeId());
	        	fields.put("issuetype", issuetype);
        
	        jsonMap.put("fields", fields);
	        
	        
	        Map<String, Object> update = new LinkedHashMap<>();
	        	
	        	List<Object> issuelinks = new ArrayList<Object>();
	        
	        		Map<String, Object> issuelink =	new LinkedHashMap<>();
	        		        
	        			Map<String, Object> add = new LinkedHashMap<>();
	        	
	        				Map<String, Object> type = new LinkedHashMap<>();
	        					type.put("name", "Relates");
	        				add.put("type", type);
	        		
	        				Map<String, Object> inwardIssue = new LinkedHashMap<>();
	        					inwardIssue.put("key", issueInfo.getLinkedIssueKey());
	        				add.put("inwardIssue", inwardIssue);

	        			issuelink.put("add", add);
	        			
	        		issuelinks.add(issuelink);
        		      		
	        	update.put("issuelinks", issuelinks);
        	
        	jsonMap.put("update", update);
        	
        	
	    ObjectMapper objectMapper = new ObjectMapper();
	    String jsonString = objectMapper.writeValueAsString(jsonMap);
        
        final String resultStr = doPost(endPoint, "UTF-8", httpHeaders, jsonString);
        
        // System.out.print(jsonString);

        return resultStr;
    }
    
    
    public String searchIssueAPI(IssueInfo issueInfo) throws IOException {
    	
    	String baseUri = issueInfo.getBaseUri();
    	String endPoint = baseUri + "/rest/api/2/search?";
        
    	endPoint = endPoint + "jql=IssueKey=" + issueInfo.getLinkedIssueKey();
    	
        final Map<String, String> httpHeaders = new LinkedHashMap<String, String>();        
        String auth = issueInfo.getUserId().toString() + ":" + issueInfo.getPassword().toString();
        
        Charset charset = StandardCharsets.UTF_8;
        byte[]enc = Base64.getEncoder().encode(auth.getBytes(charset));
        String encAuth = "Basic " + new String(enc, charset);
        
        httpHeaders.put("Authorization", encAuth);
        
        final String resultStr = doGet(endPoint, "UTF-8", httpHeaders);
        
        ObjectMapper objectMapper = new ObjectMapper();
        
        JsonNode root = objectMapper.readTree(resultStr);
                
        JsonNode test = root.get("issues").get(0);
        
        System.out.println(test);
        
        return resultStr;
    }
    

    public String doPost(String url, String encoding, Map<String, String> headers, String jsonString) throws IOException {
        final okhttp3.MediaType mediaTypeJson = okhttp3.MediaType.parse("application/json; charset=" + encoding);

        final RequestBody requestBody = RequestBody.create(mediaTypeJson, jsonString);

        final Request request = new Request.Builder()
                .url(url)
                .headers(Headers.of(headers))
                .post(requestBody)
                .build();

        final OkHttpClient client = new OkHttpClient.Builder()
                .build();
        final Response response = client.newCall(request).execute();
        final String resultStr = response.body().string();
        return resultStr;
    }
    
    
    public String doGet(String url, String encoding, Map<String, String> headers) throws IOException {
        
        final Request request = new Request.Builder()
                .url(url)
                .headers(Headers.of(headers))
                .build();

        final OkHttpClient client = new OkHttpClient.Builder()
                .build();
        final Response response = client.newCall(request).execute();
        final String resultStr = response.body().string();
        return resultStr;
    }
    
    
    
}
